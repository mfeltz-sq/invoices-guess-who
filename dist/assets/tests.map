{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","invoices-guess-who/tests/integration/components/guessing-card-test.js","invoices-guess-who/tests/integration/components/person-card-test.js","invoices-guess-who/tests/integration/components/person-grid-test.js","invoices-guess-who/tests/integration/components/playing-card-test.js","invoices-guess-who/tests/lint/app.lint-test.js","invoices-guess-who/tests/lint/templates.template.lint-test.js","invoices-guess-who/tests/lint/tests.lint-test.js","invoices-guess-who/tests/test-helper.js","invoices-guess-who/tests/unit/routes/gameboard-test.js","invoices-guess-who/tests/unit/routes/your-card-test.js","invoices-guess-who/tests/unit/utils/person-data-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"invoices-guess-who/tests/integration/components/guessing-card-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | guessing-card', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"xTYcYE0W\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"guessing-card\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WyLvaxkd\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"guessing-card\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"invoices-guess-who/tests/integration/components/person-card-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | person-card', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"UV2y3GXG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"person-card\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"U2T7dFz9\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"person-card\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"invoices-guess-who/tests/integration/components/person-grid-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | person-grid', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Kc3JOcqe\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"person-grid\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"bXml4XDJ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"person-grid\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"invoices-guess-who/tests/integration/components/playing-card-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | playing-card', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"E0KHZ0lc\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"playing-card\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"0MUY3hgp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"playing-card\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"invoices-guess-who/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/guessing-card.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/guessing-card.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/person-card.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/person-card.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/person-grid.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/person-grid.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/playing-card.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/playing-card.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/gameboard.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/gameboard.js should pass ESLint\\n\\n6:3 - Parsing error: Unexpected character \\'@\\' (null)');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/gameboard.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/gameboard.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/your-card.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/your-card.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('utils/person-data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/person-data.js should pass ESLint\\n\\n');\n  });\n});","define(\"invoices-guess-who/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('invoices-guess-who/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices-guess-who/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('invoices-guess-who/templates/components/guessing-card.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices-guess-who/templates/components/guessing-card.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('invoices-guess-who/templates/components/person-card.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'invoices-guess-who/templates/components/person-card.hbs should pass TemplateLint.\\n\\ninvoices-guess-who/templates/components/person-card.hbs\\n  1:0  error  img tags must have an alt attribute  img-alt-attributes\\n');\n  });\n  QUnit.test('invoices-guess-who/templates/components/person-grid.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices-guess-who/templates/components/person-grid.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('invoices-guess-who/templates/components/playing-card.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'invoices-guess-who/templates/components/playing-card.hbs should pass TemplateLint.\\n\\ninvoices-guess-who/templates/components/playing-card.hbs\\n  3:6  error  Incorrect indentation for `<PersonCard>` beginning at L3:C6. Expected `<PersonCard>` to be at an indentation of 4 but was found at 6.  block-indentation\\n  4:2  error  Using an {{else}} block with {{unless}} should be avoided.  simple-unless\\n');\n  });\n  QUnit.test('invoices-guess-who/templates/gameboard.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'invoices-guess-who/templates/gameboard.hbs should pass TemplateLint.\\n\\ninvoices-guess-who/templates/gameboard.hbs\\n  7:10  error  Incorrect indentation for `Take turns asking yes or no questions to try and guess the other players card by process of elimination.\\n        ` beginning at L7:C10. Expected `Take turns asking yes or no questions to try and guess the other players card by process of elimination.\\n        ` to be at an indentation of 8 but was found at 10.  block-indentation\\n');\n  });\n  QUnit.test('invoices-guess-who/templates/your-card.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices-guess-who/templates/your-card.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"invoices-guess-who/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('integration/components/guessing-card-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/guessing-card-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/person-card-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/person-card-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/person-grid-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/person-grid-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/playing-card-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/playing-card-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/gameboard-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/gameboard-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/your-card-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/your-card-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/utils/person-data-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/person-data-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"invoices-guess-who/tests/test-helper\", [\"invoices-guess-who/app\", \"invoices-guess-who/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"invoices-guess-who/tests/unit/routes/gameboard-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | gameboard', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:gameboard');\n      assert.ok(route);\n    });\n  });\n});","define(\"invoices-guess-who/tests/unit/routes/your-card-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | your-card', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:your-card');\n      assert.ok(route);\n    });\n  });\n});","define(\"invoices-guess-who/tests/unit/utils/person-data-test\", [\"invoices-guess-who/utils/person-data\", \"qunit\"], function (_personData, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Utility | person-data', function () {\n    // Replace this with your real tests.\n    (0, _qunit.test)('it works', function (assert) {\n      let result = (0, _personData.default)();\n      assert.ok(result);\n    });\n  });\n});","define('invoices-guess-who/config/environment', [], function() {\n  var prefix = 'invoices-guess-who';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('invoices-guess-who/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxnCA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}